config {
  type: "incremental",
  schema: "curated_zone",
  name: "ecommerce_orders",
  tags: ["curated", "orders"],
  bigquery: {
    partitionBy: "TIMESTAMP_TRUNC(_update_ts, HOUR)"
  },
  assertions: {
    uniqueKey: ["order_id"],
    nonNull: ["order_id", "customer_id", "event_ts"],
    rowConditions: [
      "total_amount >= 0"
    ]
  }
}

pre_operations {
  DECLARE _batch_id STRING;
  DECLARE _update_ts TIMESTAMP;
  DECLARE event_timestamp_checkpoint DEFAULT (
    ${when(
      incremental(),
      `SELECT MAX(publish_time) FROM ${self()}`,
      `SELECT TIMESTAMP("2024-01-01")`
    )}
  );

  SET _batch_id = GENERATE_UUID();
  SET _update_ts = CURRENT_TIMESTAMP();
}

WITH base AS (
  SELECT
    o.order_id,
    o.customer_id,
    LOWER(o.device) AS device,
    UPPER(o.country) AS country_code,
    o.event_ts,
    DATE(o.event_ts) AS event_date,
    o.producer_ts,
    o.payment_method,
    o.coupon,
    o.ingestion_id,
    o.subscription_name,
    o.message_id,
    o.publish_time,
    o.attributes,
    o.items
  FROM ${ref("landing_zone", "ecommerce_orders")} AS o
  WHERE o.publish_time > event_timestamp_checkpoint
  QUALIFY ROW_NUMBER() OVER (PARTITION BY o.order_id ORDER BY o.publish_time DESC) = 1
),
order_amounts AS (
  SELECT
    order_id,
    SUM( i.qty * i.unit_price ) AS total_amount
  FROM base, UNNEST(items) AS i
  GROUP BY order_id
)

SELECT
  b.order_id,
  b.customer_id,
  b.device,
  b.country_code,
  b.event_ts,
  b.event_date,
  b.producer_ts,
  b.payment_method,
  b.coupon,
  COALESCE(oa.total_amount, 0) AS total_amount,
  b.ingestion_id,
  b.subscription_name,
  b.message_id,
  b.publish_time,
  b.attributes,
  b.items,
  _update_ts,
  _batch_id
FROM base b
LEFT JOIN order_amounts oa USING (order_id)
